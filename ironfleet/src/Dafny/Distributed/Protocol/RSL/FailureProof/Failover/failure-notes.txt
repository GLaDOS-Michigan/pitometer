Failover proof plan.

Want to prove bound on when nodes[1] enters new view.

For all nodes:
- not a suspector:
  * send no suspecting heartbeats to anyone
- not a suspector, don't know about any requests. stay here forever until
  receive a request.
  * when receive a/the client request, enter the first epoch.
- not a suspector, in first epoch
  * in first epoch, then node.epoch_end < approximately(client_packet.deliveryTime + epoch_length)
- not a suspector, in second epoch
  * in second epoch, then node.epoch_end < approx(2*epoch_length + client_pkt.deliveryTime)
- can go from non-suspector with request to non-suspector+don't know about
  request at any time
  As soon as a node enters new view, we don't care about them anymore. We just
  had to prove that they sent a heartbeat early enough. I.e. if node is a
  suspector and has sent HB, then there exists a HB pkt with the right timestamp.

- nodes[1] time bounds:
  eventually will take step that goes from non-quorum to quorum of view suspicions.
  This step will involve receiving a packet from someone that we haven't gotten
  a packet from before. (if j âˆ‰ nodes[1].known_suspectors then if there are any
  suspecting HBs from nodes[j], there is one that has timestamp < blah blah)

- if suspector,
  * when become suspector, know that heartbeat will be sent within HBPeriod time (this is always true)
  * remember that nextHBTime <= approx(secondEpochExpiration + HBPeriod)
  * round-robin schedule bounds "queuing" delay between timer expiring and
    actually sending the packet

Plan:
define from NonSuspector0() (i.e. don't know about client req)
start from NonSuspector1() (i.e. know about client req)

Inductive step starting from NonSuspector1(j):
  * If execute, might become NS1
  * If epoch expires, might become NS3
  * Else, stay NS2

Inductive step starting from NonSuspector2(j):
  * If execute, might become NS1
  * If epoch expires, might become Suspector(j)
  * Else, stay NS2

Inductive step starting from Suspector(j):
  * If send HB, might become SuspectorFinished(j)

Inductive step for SuspectorFinished(j):
  * Either nodes[1] knows that we are a suspector, or our first packet is en
    route.
  * When nodes[1] takes a receive step, might get to a quorum of suspectors, in
    which case we can bound the time on the new leader by the bound on that
    first suspecting HB packet.

Inductive step for LeaderSuspectorInv():
  * Exists some minority that nodes[1] knows are suspecting.
  * If become a suspector (whatever step that is), might now have a quorum
  * If receive a HB packet, might have a quorum
  * If receive a HB packet, might directly find out about new view
    - Perhaps just assume this doesn't happen for now?
  * Otherwise, still have the same minority

Inductive step for LeaderSuspectorQuorum():
  * This is the end of the proof probably.

= Issues with approach
What happens if a node enters a new view via heartbeat from someone else?
We want to be able to bound the next heartbeat that they're going to send.
Or, I guess we can just use the fact that *someone* has a quorum of suspectors
to know that the leader will get a HB from that someone in time.

Might also get a quorum of view suspicions while node is still in first epoch!
What then?

Really, this should be two separate things, then.
One proof: any suspecting HBs I send have such-and-such bound tagged with them.
Another proof: when I get a quorum of suspecting HBs,


Can maintain that there are no new-view hearbeats until there is a quorum of
suspecting heartbeats. At that point, can prove bound on when leader will enter
new view.

= Better plan
Inductive step for NonSuspector1()
  * Do this in context where a minority of suspecting HBs have been sent.
  *

=
If a NS1() node takes a step that doesn't result in it entering a different NS
state, we know that it will not se

=
InView1Basic() &&
InView1Packets() &&
InView1Suspicion()

Start with InView1Basic()

NonSuspector(j) is affected by node 1 taking a step and by node j taking a step.
Otherwise, it should be "trivial" (because the relevant state is unchanged).

=
Can prove first:
forall pkt :: pkt in s.t_env.sentPackets ==>
  pkt is Heartbeat ==>
  pkt.suspector == true ==>
  (exists firstPkt ::
    && firstPkt in sentPackets
    && firstPkt.src == pkt.src &&
    && firstPkt.dst == pkt.dst
    && firstPkt.timestamp <= blah
    ||
    pkt.src in replicas[pkt.dst].current_suspectors
  )

Basically, show that if a suspecting HB is sent by anyone, it is sent with delivery time X.
Also, if a node takes a step in which it becomes a suspector, it does so at time Y.

What then?
How can nodes[1] do a view-change?
a.) receives a suspecting HB, then enters new view right after
b.) becomes a suspector, then enters new view right after
c.) receives a HB from a node with a higher view number

The first two cases are OK.
What about the last?
Option 1: assume it doesn't happen. Not ideal.

Possibilities:
* HB is sent *after* a majority have sent suspecting HBs.
  This is the "easy" case, and in this case, we can show that if the view-2 HB
  is received first, it happens in time less than the delivery time of the
  suspecting HBs.

* HB is sent before a majority have sent suspecting HBs.
  This can happen if a node becomes a suspector but doesn't tell anyone, and
  receives (majority-1) suspecting packets from others. The thing that puts it
  into a majority is either a local step in which it becomes a suspector, or a
  recv step in which it finds out someone else is a suspector. This can let us
  prove a bound on the timestamp of the heartbeat packet.

  But that bound on the HB packet is probably pessimistic. Because it'll allow
  for an execution in which the leader enters a new view only because a
  different node received a quorum of HB messages. It'll have an extra HB timer
  and an extra message delay in it.

  The real argument is that the leader will receive the quorum of heartbeats
  early enough, or if one of the other nodes enters the new view, then the
  leader will also enter the new view even earlier.

The first proof:
  * A node becomes a suspector at time T;
    a.) lk
    b.)
  * At time T+HBdelay after this, a heatbeat will be sent out

Invariant for second level proof:

= New proof plan
Maintain upper bound on time of nodes that have not become suspectors and have
not sent suspecting HBs.
Prove upper bound on delivery time of the first HB that says that a node is a
suspector.

This proof can be done in the context where no Ballot(1,1) heartbeats are sent.

Then, as soon as one node enters Ballot(1,1), can maintain upper bound on its
local time up until it sends its first (1,1)-heartbeat. Then, when the first
node broadcasts a (1,1)-heartbeat, we're (basically) done.

Want to prove bound on Ballot(1,1) heartbeat under the assumption that none have
been sent so far.

= More detailed:
(Logical) states of a node:
* NonSuspector0, no request
* NonSuspector1, epoch 1
* NonSuspector2, epoch 2
 - Suspector, have sent requests; OR
 - Suspector, have a quorum; will enter new view in one step.

Proof about timestamp of first suspecting HB:
* NS0, no req
* NS1, epoch 1
* NS2, epoch 2
Can transition to NS0 from NS1 if execute a req. But, then stay in NS0 forever.
At any point in time, if Ballot(1,1)-freedom becomes untrue, this lemma is irrelevant.
This maintains Ballot(1,1)-freedom.
* NS2 -> (SuspectorMinority() || SuspectorMajority() || InNewView()).
  If suspectorMinority, then will send suspecting HB.
  If suspectorMajority, then will enter new view. Want to prove a bound for when
  it enters the new view.
  InNewView(), the heartbeat has yet to be sent, but we have an upper bound on
  when it will be.

== Self contained pf about suspecting HBs
Prove that any suspecting HB is sent by time X.

From this, we can maintain bounds about time on nodes as they

Maintain that replicas[1].view == (1,0) the whole time.
If replicas[1].view == (1,1) at any point in time, then we are done, and should
terminate the proof.
